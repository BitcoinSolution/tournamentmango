(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/seiyria/GitHub/openchallenge/src/js/_init.js":[function(require,module,exports){
'use strict';

require('./constants/firebaseURL');

require('./constants/tournamentStatus');

require('./configs/location');

require('./directives/score');

require('./directives/draw-to');

require('./directives/hover-highlight');

require('./directives/scroll-observe');

require('./services/scoring');

require('./services/userStatus');

require('./services/ensureLoggedIn');

require('./services/managers/sidebarManagement');

require('./services/disconnectNotifier');

require('./services/toaster');

require('./services/filterUtils');

require('./services/auth');

require('./services/shareToken');

require('./services/currents/currentUsers');

require('./services/currents/currentEvents');

require('./services/currents/currentTournament');

require('./services/currents/currentTournaments');

require('./services/currents/currentPlayerBucket');

require('./services/managers/userManagement');

require('./services/managers/eventManagement');

require('./services/managers/tournamentManagement');

require('./services/managers/setManagement');

require('./services/prompts/inputPrompt');

require('./services/prompts/selectPrompt');

require('./services/prompts/sharePrompt');

require('./services/managers/shareManagement');

require('./controllers/rootCtrl');

require('./controllers/navCtrl');

require('./controllers/homeCtrl');

require('./controllers/managers/userManageCtrl');

require('./controllers/managers/tournamentManageCtrl');

require('./controllers/managers/eventManageCtrl');

require('./controllers/userSettingsCtrl');

require('./controllers/tournamentSidebarCtrl');

require('./controllers/tournaments/notStartedCtrl');

require('./controllers/tournaments/inProgressCtrl');

require('./controllers/dialogs/userDialogCtrl');

require('./controllers/dialogs/eventDialogCtrl');

require('./controllers/dialogs/tournamentDialogCtrl');

require('./controllers/dialogs/inputPromptCtrl');

require('./controllers/dialogs/sharePromptCtrl');

require('./controllers/dialogs/selectPromptCtrl');

require('./controllers/dialogs/resultsDialogCtrl');

require('./routes');

},{"./configs/location":"/Users/seiyria/GitHub/openchallenge/src/js/configs/location.js","./constants/firebaseURL":"/Users/seiyria/GitHub/openchallenge/src/js/constants/firebaseURL.js","./constants/tournamentStatus":"/Users/seiyria/GitHub/openchallenge/src/js/constants/tournamentStatus.js","./controllers/dialogs/eventDialogCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/eventDialogCtrl.js","./controllers/dialogs/inputPromptCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/inputPromptCtrl.js","./controllers/dialogs/resultsDialogCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/resultsDialogCtrl.js","./controllers/dialogs/selectPromptCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/selectPromptCtrl.js","./controllers/dialogs/sharePromptCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/sharePromptCtrl.js","./controllers/dialogs/tournamentDialogCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/tournamentDialogCtrl.js","./controllers/dialogs/userDialogCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/userDialogCtrl.js","./controllers/homeCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/homeCtrl.js","./controllers/managers/eventManageCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/managers/eventManageCtrl.js","./controllers/managers/tournamentManageCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/managers/tournamentManageCtrl.js","./controllers/managers/userManageCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/managers/userManageCtrl.js","./controllers/navCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/navCtrl.js","./controllers/rootCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/rootCtrl.js","./controllers/tournamentSidebarCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/tournamentSidebarCtrl.js","./controllers/tournaments/inProgressCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/tournaments/inProgressCtrl.js","./controllers/tournaments/notStartedCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/tournaments/notStartedCtrl.js","./controllers/userSettingsCtrl":"/Users/seiyria/GitHub/openchallenge/src/js/controllers/userSettingsCtrl.js","./directives/draw-to":"/Users/seiyria/GitHub/openchallenge/src/js/directives/draw-to.js","./directives/hover-highlight":"/Users/seiyria/GitHub/openchallenge/src/js/directives/hover-highlight.js","./directives/score":"/Users/seiyria/GitHub/openchallenge/src/js/directives/score.js","./directives/scroll-observe":"/Users/seiyria/GitHub/openchallenge/src/js/directives/scroll-observe.js","./routes":"/Users/seiyria/GitHub/openchallenge/src/js/routes.js","./services/auth":"/Users/seiyria/GitHub/openchallenge/src/js/services/auth.js","./services/currents/currentEvents":"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentEvents.js","./services/currents/currentPlayerBucket":"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentPlayerBucket.js","./services/currents/currentTournament":"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentTournament.js","./services/currents/currentTournaments":"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentTournaments.js","./services/currents/currentUsers":"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentUsers.js","./services/disconnectNotifier":"/Users/seiyria/GitHub/openchallenge/src/js/services/disconnectNotifier.js","./services/ensureLoggedIn":"/Users/seiyria/GitHub/openchallenge/src/js/services/ensureLoggedIn.js","./services/filterUtils":"/Users/seiyria/GitHub/openchallenge/src/js/services/filterUtils.js","./services/managers/eventManagement":"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/eventManagement.js","./services/managers/setManagement":"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/setManagement.js","./services/managers/shareManagement":"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/shareManagement.js","./services/managers/sidebarManagement":"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/sidebarManagement.js","./services/managers/tournamentManagement":"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/tournamentManagement.js","./services/managers/userManagement":"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/userManagement.js","./services/prompts/inputPrompt":"/Users/seiyria/GitHub/openchallenge/src/js/services/prompts/inputPrompt.js","./services/prompts/selectPrompt":"/Users/seiyria/GitHub/openchallenge/src/js/services/prompts/selectPrompt.js","./services/prompts/sharePrompt":"/Users/seiyria/GitHub/openchallenge/src/js/services/prompts/sharePrompt.js","./services/scoring":"/Users/seiyria/GitHub/openchallenge/src/js/services/scoring.js","./services/shareToken":"/Users/seiyria/GitHub/openchallenge/src/js/services/shareToken.js","./services/toaster":"/Users/seiyria/GitHub/openchallenge/src/js/services/toaster.js","./services/userStatus":"/Users/seiyria/GitHub/openchallenge/src/js/services/userStatus.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/app.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = angular.module('openchallenge', ['ngAria', 'ngAnimate', 'ngMaterial', 'ngMdIcons', 'ngStorage', 'ui.router', 'firebase', 'md.data.table', 'angular-sortable-view']);
module.exports = exports['default'];

},{}],"/Users/seiyria/GitHub/openchallenge/src/js/configs/location.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].config(function ($locationProvider) {
  $locationProvider.hashPrefix('!');
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/constants/firebaseURL.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].constant('FirebaseURL', 'https://openchallenge.firebaseio.com');

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/constants/tournamentStatus.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].constant('TournamentStatus', {
  NOT_STARTED: 'Not started',
  IN_PROGRESS: 'In progress',
  COMPLETED: 'Completed'
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/eventDialogCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('eventDialogController', function ($scope, $mdDialog, tEvent, CurrentUsers, FilterUtils) {

  $scope.cancel = $mdDialog.cancel;

  var success = function success(item) {
    return $mdDialog.hide(item);
  };

  $scope.label = _.keys(tEvent).length > 0 ? 'Edit' : 'Add';

  $scope.item = _.extend({}, tEvent);
  if ($scope.item.date) $scope.item.date = new Date($scope.item.date);

  $scope.users = CurrentUsers.get();

  $scope.getLocations = function () {
    var query = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    return FilterUtils.getAndFilter($scope.users.list, 'location', query);
  };

  $scope.addItem = function () {
    $scope.item.form.$setSubmitted();

    if ($scope.item.form.$valid) {
      var newItem = _.omit($scope.item, 'form');
      newItem.date = newItem.date.getTime();
      success(newItem);
    }
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/inputPromptCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('inputPromptController', function ($scope, $mdDialog, title, label, defaultValue, invalidValues) {

  $scope.cancel = $mdDialog.cancel;

  var success = function success(item) {
    return $mdDialog.hide(item);
  };

  $scope.string = defaultValue;
  $scope.title = title;
  $scope.label = label;
  $scope.isValid = function () {
    return !_.contains(invalidValues, $scope.string);
  };

  $scope.submit = function () {
    $scope.form.$setSubmitted();

    if ($scope.form.$valid) {
      success($scope.string);
    }
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/resultsDialogCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('resultsDialogController', function ($scope, $mdDialog, tournamentName, results, players) {

  $scope.cancel = $mdDialog.cancel;

  $scope.tournamentName = tournamentName;
  $scope.results = results;
  $scope.players = players;

  $scope.nameString = function (idx) {
    var player = $scope.players[idx - 1];
    if (player.alias) return player.alias + ' (' + player.name + ')';
    return player.name;
  };

  $scope.toOrdinal = function (num) {
    var s = ['th', 'st', 'nd', 'rd'];
    var v = num % 100;
    return num + (s[(v - 20) % 10] || s[v] || s[0]);
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/selectPromptCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('selectPromptController', function ($scope, $mdDialog, title, label, defaultValue, selectableValues) {

  $scope.cancel = $mdDialog.cancel;

  var success = function success(item) {
    return $mdDialog.hide(item);
  };

  $scope.string = defaultValue;
  $scope.title = title;
  $scope.label = label;
  $scope.selectableValues = _.sortBy(selectableValues);
  $scope.groups = _.uniq(_.pluck(selectableValues, 'group'));

  $scope.submit = function () {
    $scope.form.$setSubmitted();

    if ($scope.form.$valid) {
      success($scope.string);
    }
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/sharePromptCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('sharePromptController', function ($scope, $mdDialog, $firebaseObject, FirebaseURL, title, defaultValue) {

  var allUsers = $firebaseObject(new Firebase(FirebaseURL + '/users'));

  $scope.cancel = $mdDialog.cancel;

  var success = function success(item) {
    return $mdDialog.hide(item);
  };

  $scope.title = title;
  $scope.sharedWith = defaultValue;

  $scope.getUser = function (searchKey) {
    try {
      var key = atob(searchKey);
      return allUsers[key] ? [{ name: allUsers[key].name, uid: key }] : [];
    } catch (e) {
      return [];
    }
  };

  $scope.submit = function () {
    success($scope.sharedWith);
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/tournamentDialogCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('tournamentDialogController', function ($scope, $mdDialog, tournament, CurrentEvents, CurrentUsers, FilterUtils, TournamentStatus) {

  $scope.cancel = $mdDialog.cancel;

  var success = function success(item) {
    return $mdDialog.hide(item);
  };

  $scope.label = _.keys(tournament).length > 0 ? 'Edit' : 'Add';

  $scope.item = _.extend({}, tournament);
  $scope.allEvents = CurrentEvents.get();

  $scope.users = CurrentUsers.get();
  $scope.getGames = function () {
    var query = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    return FilterUtils.getAndFilter($scope.users.list, 'games', query);
  };

  $scope.addItem = function () {
    $scope.item.form.$setSubmitted();

    if ($scope.item.form.$valid) {
      var newItem = _.omit($scope.item, 'form');
      newItem.status = newItem.status || TournamentStatus.NOT_STARTED;
      success(newItem);
    }
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/dialogs/userDialogCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('userDialogController', function ($scope, $mdDialog, player, viewOnly, UserManagement, FilterUtils) {

  $scope.cancel = $mdDialog.cancel;
  $scope.viewOnly = viewOnly;

  var success = function success(item) {
    return $mdDialog.hide(item);
  };

  $scope.label = _.keys(player).length > 0 ? 'Edit' : 'Add';

  $scope.getLocations = function () {
    var query = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    return FilterUtils.getAndFilter(UserManagement.users, 'location', query);
  };
  $scope.getGames = function () {
    var query = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    return _.difference(FilterUtils.getAndFilter(UserManagement.users, 'games', query), $scope.item.games);
  };
  $scope.getCharacters = function () {
    var query = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    return _.difference(FilterUtils.getAndFilter(UserManagement.users, 'characters', query), $scope.item.characters);
  };

  $scope.item = _.extend({
    aliases: [],
    games: [],
    characters: []
  }, player);

  $scope.addItem = function () {
    $scope.item.form.$setSubmitted();

    if ($scope.item.form.$valid) {
      success(_.omit($scope.item, 'form'));
    }
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/homeCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('homeController', function ($scope, SidebarManagement) {
  SidebarManagement.hasSidebar = false;

  $scope.blocks = [{
    name: 'Tournament Management',
    info: 'Generate single or double elimination brackets with ease.',
    icon: 'assignment'
  }, {
    name: 'Player Catalog',
    info: 'Keep track of all the important info - wins, losses, names, aliases, and more.',
    icon: 'accessibility'
  }, {
    name: 'Broadcasting',
    info: 'When you\'re online, share any or all of your tournament brackets with the world.',
    icon: 'settings_input_antenna'
  }, {
    name: 'Offline Capability',
    info: 'You can use OpenChallenge without an internet connection. When you get a signal, OpenChallenge will save the data automatically.',
    icon: 'desktop_windows'
  }, {
    name: 'Collaboration',
    info: 'Working with a group? Let them have access to your player catalog.',
    icon: 'group'
  }, {
    name: 'Open Source',
    link: 'https://github.com/seiyria/openchallenge',
    info: 'No secrets here. Check out the source on GitHub by clicking the icon above. Feel free to open an issue if you have problems, or submit a pull request if you\'re inclined.',
    icon: 'github-circle'
  }];
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/managers/eventManageCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('eventManageController', function ($scope, SidebarManagement, EnsureLoggedIn, EventManagement, CurrentEvents, CurrentTournaments) {
  SidebarManagement.hasSidebar = true;
  EnsureLoggedIn.check();

  $scope.events = [];
  $scope.visibleEvents = [];
  $scope.selected = [];

  $scope.datatable = {
    filter: '',
    order: '-name',
    limit: 10,
    page: 1,
    bookmark: 1
  };

  $scope.filter = { options: { throttle: 500 } };

  $scope.hideSearch = function () {
    $scope.datatable.filter = '';
    $scope.filter.show = false;
    if ($scope.filter.form.$dirty) {
      $scope.filter.form.$setPristine();
    }
  };

  var filterWatch = function filterWatch(newValue, oldValue) {
    if (!oldValue) {
      $scope.datatable.bookmark = $scope.datatable.page;
    }

    if (newValue !== oldValue) {
      $scope.datatable.page = 1;
    }

    if (!newValue) {
      $scope.datatable.page = $scope.datatable.bookmark;
    }

    $scope.getEvents();
  };

  $scope.$watch('datatable.filter', filterWatch);

  $scope.toggleShowArchived = function () {
    $scope.showArchived = !$scope.showArchived;
    $scope.getEvents();
  };

  $scope.getEvents = function () {
    return $scope.visibleEvents = EventManagement.filterEvents($scope.events, $scope.datatable, $scope.showArchived);
  };

  $scope.addItem = function (event) {
    EventManagement.addItem(event, function (newEvent) {
      $scope.events.$add(newEvent);
    });
  };

  $scope.editItem = function (event) {
    EventManagement.editItem(event, $scope.selected[0], function (oldEvent) {
      var item = $scope.events.$getRecord(oldEvent.$id);
      _.extend(item, oldEvent);
      $scope.events.$save(item);
    });
  };

  $scope.removeItem = function (event) {
    EventManagement.removeItem(event, $scope.selected, function () {
      var tournaments = CurrentTournaments.get();
      _.each(tournaments, function (tournament) {
        if (tournament.event === event.$id) {
          var fbTournament = tournaments.$getRecord(tournament.$id);
          fbTournament.event = null;
          tournaments.$save(fbTournament);
        }
      });

      _.each($scope.selected, function (event) {
        var item = $scope.events.$getRecord(event.$id);
        $scope.events.$remove(item);
      });

      $scope.selected = [];
    });
  };

  $scope.archiveItem = function (event) {
    EventManagement.archiveItem(event, $scope.selected, function () {
      _.each($scope.selected, function (event) {
        var item = $scope.events.$getRecord(event.$id);
        item.archived = !item.archived;
        $scope.events.$save(item);
      });

      $scope.selected = [];
    });
  };

  $scope.loadEvents = function () {
    $scope.events = CurrentEvents.get();
    $scope.events.$loaded($scope.getEvents);
    $scope.events.$watch($scope.getEvents);
  };

  CurrentEvents.watch.then(null, null, function () {
    $scope.loadEvents();
  });

  $scope.loadEvents();
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/managers/tournamentManageCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('tournamentManageController', function ($scope, $state, ShareToken, SidebarManagement, EnsureLoggedIn, TournamentManagement, CurrentTournaments, CurrentPlayerBucket, TournamentStatus, UserStatus) {
  SidebarManagement.hasSidebar = true;
  EnsureLoggedIn.check();

  $scope.playersAvailable = CurrentPlayerBucket.get().length;

  $scope.tStatus = TournamentStatus;

  $scope.tournaments = [];
  $scope.visibleTournaments = [];
  $scope.selected = [];

  $scope.datatable = {
    filter: '',
    order: '-name',
    limit: 10,
    page: 1,
    bookmark: 1
  };

  $scope.filter = { options: { throttle: 500 } };

  $scope.hideSearch = function () {
    $scope.datatable.filter = '';
    $scope.filter.show = false;
    if ($scope.filter.form.$dirty) {
      $scope.filter.form.$setPristine();
    }
  };

  var filterWatch = function filterWatch(newValue, oldValue) {
    if (!oldValue) {
      $scope.datatable.bookmark = $scope.datatable.page;
    }

    if (newValue !== oldValue) {
      $scope.datatable.page = 1;
    }

    if (!newValue) {
      $scope.datatable.page = $scope.datatable.bookmark;
    }

    $scope.getTournaments();
  };

  $scope.$watch('datatable.filter', filterWatch);

  $scope.toggleShowArchived = function () {
    $scope.showArchived = !$scope.showArchived;
    $scope.getTournaments();
  };

  $scope.getTournaments = function () {
    return $scope.visibleTournaments = TournamentManagement.filterTournaments($scope.tournaments, $scope.datatable, $scope.showArchived);
  };

  $scope.addItem = function (event) {
    TournamentManagement.addItem(event, function (newTournament) {
      $scope.tournaments.$add(newTournament);
    });
  };

  $scope.tournamentName = TournamentManagement.getTournamentEventNameFromId;

  $scope.editItem = function (event) {
    TournamentManagement.editItem(event, $scope.selected[0], function (oldTournament) {
      var item = $scope.tournaments.$getRecord(oldTournament.$id);
      _.extend(item, oldTournament);
      $scope.tournaments.$save(item);
    });
  };

  $scope.removeItem = function (event) {
    TournamentManagement.removeItem(event, $scope.selected, function () {
      _.each($scope.selected, function (tournament) {
        var item = $scope.tournaments.$getRecord(tournament.$id);
        $scope.tournaments.$remove(item);
      });

      $scope.selected = [];
    });
  };

  $scope.archiveItem = function (event) {
    TournamentManagement.archiveItem(event, $scope.selected, function () {
      _.each($scope.selected, function (tournament) {
        var item = $scope.tournaments.$getRecord(tournament.$id);
        item.archived = !item.archived;
        $scope.tournaments.$save(item);
      });

      $scope.selected = [];
    });
  };

  $scope.startTournament = function (id) {
    $state.go('setupTournament', { tournamentId: id });
  };

  $scope.seeTournament = function (id) {
    $state.go('tournamentInProgress', { userId: ShareToken(UserStatus.firebase.playerSetUid), tournamentId: id, setId: UserStatus.firebase.playerSet });
  };

  $scope.loadTournaments = function () {
    $scope.tournaments = CurrentTournaments.get();
    $scope.tournaments.$loaded($scope.getTournaments);
    $scope.tournaments.$watch($scope.getTournaments);
  };

  CurrentTournaments.watch.then(null, null, function () {
    $scope.loadTournaments();
  });

  $scope.loadTournaments();
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/managers/userManageCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('userManageController', function ($scope, $firebaseArray, $firebaseObject, FirebaseURL, ScoringFunctions, CurrentUsers, InputPrompt, UserStatus, CurrentPlayerBucket, CurrentTournaments, ShareManagement, SetManagement, SidebarManagement, EnsureLoggedIn, UserManagement, TournamentStatus, Toaster) {

  SidebarManagement.hasSidebar = true;
  var authData = EnsureLoggedIn.check();

  $scope.datatable = {
    filter: '',
    order: '-name',
    limit: 10,
    page: 1,
    bookmark: 1
  };

  $scope.filter = { options: { throttle: 500 } };

  $scope.users = [];
  $scope.visibleUsers = [];
  $scope.selected = [];
  $scope.listKeys = [];
  $scope.sharedLists = [];

  $scope.userData = UserStatus;

  $scope.addItem = function (event) {
    UserManagement.addItem(event, function (newPlayer) {
      $scope.users.$add(newPlayer);
    });
  };

  $scope.editItem = function (event) {
    UserManagement.editItem(event, $scope.selected[0], function (oldPlayer) {
      var item = $scope.users.$getRecord(oldPlayer.$id);
      _.extend(item, oldPlayer);
      $scope.users.$save(item);
    });
  };

  $scope.removeItem = function (event) {
    UserManagement.removeItem(event, $scope.selected, function () {
      _.each($scope.selected, function (player) {
        var item = $scope.users.$getRecord(player.$id);
        $scope.users.$remove(item);
      });

      $scope.selected = [];
    });
  };

  $scope.viewItem = UserManagement.viewItem;

  $scope.getUsers = function () {
    $scope.visibleUsers = UserManagement.filterUsers($scope.users, $scope.datatable);
  };

  $scope.hideSearch = function () {
    $scope.datatable.filter = '';
    $scope.filter.show = false;
    if ($scope.filter.form.$dirty) {
      $scope.filter.form.$setPristine();
    }
  };

  var filterWatch = function filterWatch(newValue, oldValue) {
    if (!oldValue) {
      $scope.datatable.bookmark = $scope.datatable.page;
    }

    if (newValue !== oldValue) {
      $scope.datatable.page = 1;
    }

    if (!newValue) {
      $scope.datatable.page = $scope.datatable.bookmark;
    }

    $scope.getUsers();
  };

  $scope.$watch('datatable.filter', filterWatch);

  $scope.changePlayerSet = function () {
    var name = arguments.length <= 0 || arguments[0] === undefined ? 'default' : arguments[0];

    var mySet = _.findWhere($scope.listKeys, { short: name });
    UserStatus.firebase.playerSet = name;
    UserStatus.firebase.playerSetUid = mySet ? mySet.uid : authData.uid;

    $scope.isMine = UserStatus.firebase.playerSetUid === authData.uid;
    UserStatus.firebase.$save();
  };

  $scope.setCurrentPlayerSet = function (setData) {
    var name = arguments.length <= 1 || arguments[1] === undefined ? UserStatus.firebase.playerSet : arguments[1];

    $scope.setObject = setData;
    CurrentPlayerBucket.clear();
    $scope.setObject.$loaded(function () {
      if (!$scope.setObject.basename && name) {
        $scope.setObject.basename = name;
        $scope.setObject.$save();
      }
      if (!$scope.setObject.realName && name) {
        $scope.setObject.realName = name;
        $scope.setObject.$save();
      }
      if (!$scope.setObject.owner) {
        $scope.setObject.owner = authData.uid;
        $scope.setObject.$save();
      }
      $scope.loadUserList();
    });
  };

  CurrentUsers.watch.then(null, null, function (list) {
    $scope.setCurrentPlayerSet(list);
  });

  $scope.hasMultipleSets = function () {
    return $scope.listKeys.length > 1;
  };

  $scope.ownsCurrentSet = function () {
    return $scope.setObject ? $scope.setObject.owner === authData.uid : false;
  };

  $scope.doNewSet = function (event) {
    return SetManagement.newSet(event, _.pluck($scope.listKeys, 'short'), $scope.changePlayerSet);
  };

  $scope.doRename = function (event) {
    return SetManagement.renameSet(event, $scope.setObject.realName, $scope.renameCurrentPlayerSet);
  };

  $scope.doDelete = function (event) {
    return SetManagement.deleteSet(event, $scope.removeSet);
  };

  $scope.doChange = function (event) {
    return SetManagement.changeSet(event, $scope.setObject.realName, $scope.listKeys, $scope.changeSetFromRealname);
  };

  $scope.doOrOpen = function (event) {
    return $scope.isOpen ? $scope.doChange(event) : $scope.isOpen = true;
  };

  $scope.openShareDialog = function (event) {
    return SetManagement.shareSet(event, $scope.setObject.realName, $scope.setObject.sharedWith, $scope.updateShareSettings);
  };

  $scope.changeSetFromRealname = function (newSet) {
    return $scope.changePlayerSet(_.findWhere($scope.listKeys, { realName: newSet }).short);
  };

  $scope.updateShareSettings = function (shareData) {
    var oldSharedWith = _.keys($scope.setObject.shareIDs);

    ShareManagement.manageSorting(oldSharedWith, shareData, $scope.setObject.basename);

    $scope.setObject.shareIDs = _.reduce(_.pluck(shareData, 'uid'), function (prev, cur) {
      prev[cur] = true;
      return prev;
    }, {});
    $scope.setObject.sharedWith = shareData;
    $scope.setObject.$save();
  };

  $scope.removeSet = function () {
    var oldSharedWith = _.keys($scope.setObject.shareIDs);
    ShareManagement.manageSorting(oldSharedWith, [], $scope.setObject.basename);

    $scope.setObject.$remove().then(function () {
      $scope.changePlayerSet(_.sample($scope.listKeys).short);
    });
  };

  $scope.renameCurrentPlayerSet = function (newName) {
    if (!newName) return;
    $scope.setObject.realName = newName;
    $scope.setObject.$save();
  };

  $scope.loadUserList = function () {
    $scope.users = UserManagement.users = $firebaseArray($scope.setObject.$ref().child('list'));
    $scope.users.$loaded($scope.getUsers);
    $scope.users.$watch($scope.getUsers);
  };

  $scope.resetListKeys = function () {
    $scope.listKeys = _.reject(_.keys($scope.allLists), function (key) {
      return _.contains(key, '$');
    });
    $scope.listKeys = _.map($scope.listKeys, function (key) {
      return { realName: $scope.allLists[key].realName, short: key, uid: authData.uid, group: 'Mine' };
    });
    $scope.listKeys = $scope.listKeys.concat($scope.sharedLists);
  };

  $scope.loadAllLists = function () {
    $scope.allLists = $firebaseObject(new Firebase(FirebaseURL + '/users/' + authData.uid + '/players'));
    $scope.allLists.$watch($scope.resetListKeys);
  };

  $scope.loadSharedWithMe = function () {
    var sharedWithMe = $firebaseObject(new Firebase(FirebaseURL + '/shares/' + authData.uid));
    sharedWithMe.$watch(function () {
      $scope.sharedLists = [];

      _.each(_.keys(sharedWithMe), function (sharer) {

        if (_.contains(sharer, '$')) return;
        var sharedbase = $firebaseObject(new Firebase(FirebaseURL + '/users/' + sharer));

        sharedbase.$loaded().then(function () {
          _.each(sharedWithMe[sharer], function (doc) {
            var sharename = sharedbase.name;
            var realDoc = sharedbase.players[doc];
            $scope.sharedLists.push({ realName: realDoc.realName, uid: sharer, short: realDoc.basename, group: 'Shared by ' + sharename });
          });
          $scope.resetListKeys();
        });
      });
    });
  };

  $scope.addToPlayerBucket = function () {
    CurrentPlayerBucket.add($scope.selected);
    Toaster.show('Successfully added ' + $scope.selected.length + ' players to bucket.');
    $scope.selected = [];
  };

  $scope.tournaments = CurrentTournaments.get();
  CurrentTournaments.watch.then(null, null, function (tournaments) {
    return $scope.tournaments = tournaments;
  });

  $scope.anyCompletedTournaments = function () {
    return _.any($scope.tournaments, function (t) {
      return t.status === TournamentStatus.COMPLETED;
    });
  };
  $scope.allTournamentGames = function () {
    return _.uniq($scope.tournaments, function (t) {
      return t.game;
    });
  };

  $scope.recalculateScore = function () {
    $scope.calculating = true;

    _.each($scope.users, function (user) {
      return user.points = user.wins = user.losses = 0;
    });

    _.each(_.filter($scope.tournaments, function (t) {
      return t.status === TournamentStatus.COMPLETED;
    }), function (tournament) {
      _.each(tournament.matches, function (match) {
        if (_.any(match.p, function (id) {
          return id === -1;
        })) return; // skip hidden matches

        var result = _.findWhere(tournament.trn, { id: match.id });
        _.each(match.p, function (id, idx) {
          var player = tournament.players[id - 1];
          var ref = $scope.users.$getRecord(player.id);
          var winScore = _.max(result.score);
          var playerScore = result.score[idx];

          var key = playerScore === winScore ? 'wins' : 'losses';
          if (!ref[key]) ref[key] = 0;
          ref[key]++;
        });
      });
    });

    ScoringFunctions[UserStatus.firebase.scoreFunc]($scope.users);

    _.each($scope.users, function (p) {
      $scope.users.$save(p);
    });

    $scope.calculating = false;
  };

  $scope.saveFirebase = function () {
    UserStatus.firebase.$save();
    $scope.recalculateScore();
  };

  $scope.load = function () {
    UserStatus.firebase.$loaded(function () {

      if (!UserStatus.firebase.playerSet) {
        $scope.changePlayerSet('default');
      }

      $scope.setCurrentPlayerSet(CurrentUsers.get());

      $scope.isMine = UserStatus.firebase.playerSetUid === authData.uid;
    });
    $scope.loadAllLists();
    $scope.loadSharedWithMe();
  };

  $scope.load();
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/navCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('navController', function ($scope, $mdSidenav, Auth, DisconnectNotifier, SidebarManagement, UserStatus) {

  $scope.toggleList = function () {
    $mdSidenav('left').toggle();
  };

  $scope.sidebar = SidebarManagement;

  $scope.auth = Auth;

  DisconnectNotifier.then(null, null, function (connected) {
    $scope.connected = connected;
  });

  $scope.userStatus = UserStatus;
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/rootCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('rootController', function ($scope, $mdSidenav, UserStatus, SidebarManagement) {
  $scope.userStatus = UserStatus;
  $scope.sidebar = SidebarManagement;
  $scope.dismissSidebar = function () {
    return $mdSidenav('left').toggle();
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/tournamentSidebarCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('tournamentSidebarController', function ($scope, $state, $mdSidenav, CurrentPlayerBucket) {
  $scope.playerBucket = CurrentPlayerBucket.get();

  CurrentPlayerBucket.watch.then(null, null, function (item) {
    return $scope.playerBucket = item;
  });

  $scope.navigateTo = function (state) {
    $state.go(state);
    $mdSidenav('left').toggle();
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/tournaments/inProgressCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].filter('inRound', function () {
  return function (items, round) {
    return _.filter(items, function (i) {
      return i.id.r === round;
    });
  };
});
_app2['default'].filter('inSection', function () {
  return function (items, section) {
    return _.filter(items, function (i) {
      return i.id.s === section;
    });
  };
});

_app2['default'].controller('inProgressController', function ($scope, $timeout, EnsureLoggedIn, SidebarManagement, Toaster, CurrentUsers, CurrentPlayerBucket, UserStatus, TournamentStatus, FirebaseURL, $firebaseObject, $state, $stateParams, $mdDialog) {

  SidebarManagement.hasSidebar = false;
  var authData = EnsureLoggedIn.check(false);

  var clipboard = new Clipboard('#copy-url');
  clipboard.on('success', function () {
    Toaster.show('Copied URL to clipboard!');
  });

  var defaultHasAccess = function defaultHasAccess() {
    return authData && authData.uid === UserStatus.firebase.playerSetUid;
  };

  $scope.hasAccess = defaultHasAccess();

  if (authData) {
    CurrentUsers.watch.then(null, null, function (data) {
      if (!data.shareIDs) return;
      $scope.hasAccess = defaultHasAccess() || data && data.shareIDs[authData.uid];
    });
  }

  var idMap = {};
  var badIds = 0;

  $scope.url = window.location.href;
  $scope.includedTemplate = 'duel';

  var determineTemplate = function determineTemplate(options) {
    var hash = { singles: 'duel', doubles: 'duel', groupstage: 'groupstage', ffa: 'ffa', masters: 'masters' };
    return options.last ? 'duel' : hash[options.type]; // backwards compatibility. damn alpha testers
  };

  var determineTournament = function determineTournament(options) {
    var hash = { singles: Duel, doubles: Duel, groupstage: GroupStage, ffa: FFA, masters: Masters };
    return options.last ? Duel : hash[options.type]; // backwards compatibility. damn alpha testers
  };

  $scope.toCharacter = function (round) {
    var str = '';
    while (round > 0) {
      var modulo = (round - 1) % 26;
      str = String.fromCharCode(65 + modulo) + str;
      round = Math.round((round - modulo) / 26);
    }
    return str;
  };

  $scope.showResults = function (event) {
    var mdDialogOptions = {
      clickOutsideToClose: true,
      controller: 'resultsDialogController',
      focusOnOpen: false,
      templateUrl: '/dialog/results',
      event: event,
      locals: {
        tournamentName: $scope.tournamentName,
        results: $scope.trn.results(),
        players: $scope.bucket
      }
    };

    $mdDialog.show(mdDialogOptions);
  };

  $scope.loadTournament = function (ref) {
    var makeNew = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    $scope.tournamentName = $scope.ref.name;
    $scope.includedTemplate = determineTemplate(ref.options);

    $scope.bucket = ref.players;

    var oldScores = _.cloneDeep(ref.trn);
    var tournamentProto = determineTournament(ref.options);

    $scope.trn = ref.trn && !makeNew ? tournamentProto.restore($scope.bucket.length, ref.options, ref.trn) : new tournamentProto($scope.bucket.length, ref.options);

    if (ref.trn && !makeNew) {
      _.each(oldScores, function (match) {
        var existingMatch = _.findWhere($scope.trn.matches, { id: match.id });
        if (!existingMatch) return;
        existingMatch.score = _.clone(match.score);
      });
    }
  };

  $scope.strings = [];
  $scope.getString = function (matchId) {
    var idx = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

    var obj = _.findWhere($scope.strings, { id: matchId });
    if (!obj) return 'TBD';
    return obj.strings[idx];
  };

  $scope.loadTournamentWinnerStrings = function () {

    var matchInfo = [{ prefix: 'Winner of', genFunction: 'right' }, { prefix: 'Loser of', genFunction: 'down', checkPassthrough: true, altFunction: 'right' }];

    var isBad = function isBad(match) {
      return _.any(match.p, function (p) {
        return p === -1;
      });
    };

    _.each(matchInfo, function (info) {
      _.each($scope.trn.matches, function (match) {

        if (isBad(match)) {
          return;
        }

        var nextMatchInfo = $scope.trn[info.genFunction](match.id);
        if (!nextMatchInfo) {
          return;
        }

        var nextMatch = $scope.trn.findMatch(nextMatchInfo[0]);
        if (!nextMatch) {
          return;
        }

        if (_.isEqual(match, nextMatch)) {
          return;
        }

        if (info.checkPassthrough && isBad(nextMatch)) {
          var newNextMatchInfo = $scope.trn[info.altFunction](nextMatch.id);
          if (!newNextMatchInfo) return;
          nextMatchInfo = newNextMatchInfo;
          var obj = _.findWhere($scope.trn.matches, { id: nextMatchInfo[0] });
          if (!obj) return;
          nextMatch = obj;
        }

        var stringObj = _.findWhere($scope.strings, { id: nextMatch.id });
        if (!stringObj) {
          stringObj = { id: nextMatch.id, strings: [] };
          $scope.strings.push(stringObj);
        }

        stringObj.strings[nextMatchInfo[1]] = info.prefix + ' ' + match.id.s + '-' + $scope.toCharacter($scope.getIdForMatch(match));
      });
    });
  };

  $scope.ref = $firebaseObject(new Firebase(FirebaseURL + '/users/' + atob($stateParams.userId) + '/players/' + $stateParams.setId + '/tournaments/' + $stateParams.tournamentId));

  $scope.reset = function (ev) {
    var confirm = $mdDialog.confirm().title('Reset Bracket').content('Would you like to reset this bracket? This is a permanent, irreversible action.').targetEvent(ev).ok('Yes').cancel('No');
    $mdDialog.show(confirm).then(function () {
      $scope.loadTournament($scope.ref, true);
      $scope.save();
    });
  };

  $scope.toPDF = function () {
    var pdf = new jsPDF();
    pdf.fromHTML($('.duel-area').get(0), 15, 15);
  };

  $scope.savePublicity = function () {
    $scope.ref.$save();
  };

  $scope.ref.$watch(function () {
    return $scope.loadTournament($scope.ref);
  });

  $scope.ref.$loaded().then(function () {
    $scope.loadTournament($scope.ref);

    var horizMatches = _.max($scope.trn.matches, 'id.r').id.r; // these start at 1 I guess.
    var totalSections = _.max($scope.trn.matches, 'id.s').id.s; // get the highest section

    $scope.maxMatches = new Array(horizMatches);
    $scope.numMatchesPerSection = _.map(new Array(totalSections), function () {
      return 0;
    });
    $scope.nextMatch = function (match) {
      return $scope.trn.right(match);
    };

    $scope.matchesLeft = function () {
      return _.reduce($scope.trn.matches, function (prev, m) {
        return prev + ($scope.noRender(m) ? 0 : ~ ~!m.m);
      }, 0);
    };

    $scope.getIdForMatch = function (match) {
      var id = match.id;
      var strId = JSON.stringify(id);
      if (idMap[strId]) return idMap[strId];
      return idMap[strId] = $scope.noRender(match) ? ++badIds : ++$scope.numMatchesPerSection[id.s - 1];
    };

    $scope.getName = function (idx) {
      var user = $scope.bucket[idx];
      if (!user) return;
      if (user.alias) return user.alias;
      return user.name;
    };

    $scope.invalidMatch = function (match) {
      return !$scope.trn.isPlayable(match);
    };
    $scope.noRender = function (match) {
      return _.any(match.p, function (p) {
        return p === -1;
      });
    };
    $scope.scoresEqual = function (match) {
      if (match.score && match.score.length === 1 || _.compact(match.score).length !== match.p.length) return true;
      var sorted = _.sortBy(match.score).reverse();
      return sorted[0] === sorted[1];
    };

    $scope.confirmScore = function (match) {
      $scope.trn.score(match.id, _.map(match.score, function (i) {
        return +i;
      }));
      $scope.save();
    };

    $scope.save = function () {
      $scope.ref.trn = $scope.trn.state;
      $scope.ref.matches = $scope.trn.matches;
      if ($scope.trn.isDone()) $scope.ref.status = TournamentStatus.COMPLETED;
      $scope.ref.$save();
    };

    if (!_.contains(['groupstage', 'ffa', 'masters'], $scope.includedTemplate)) {
      $timeout($scope.loadTournamentWinnerStrings, 0);
    }
  });
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/tournaments/notStartedCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('notStartedController', function ($scope, EnsureLoggedIn, UserStatus, ShareToken, TournamentStatus, FirebaseURL, $firebaseObject, CurrentPlayerBucket, CurrentTournament, $state, $stateParams) {

  var authData = EnsureLoggedIn.check();

  $scope.bucket = CurrentPlayerBucket.get();
  CurrentPlayerBucket.watch.then(null, null, function (bucket) {
    return $scope.bucket = bucket;
  });

  $scope.toCharacter = function (num) {
    var bucket = Math.ceil(num / 2);
    var str = '';
    while (bucket > 0) {
      var modulo = (bucket - 1) % 26;
      str = String.fromCharCode(65 + modulo) + str;
      bucket = Math.round((bucket - modulo) / 26);
    }
    return str;
  };

  var stringToArray = function stringToArray(string) {
    return _.compact(_.map(string.split(','), function (s) {
      return parseInt(s.trim());
    })) || [];
  };

  $scope.tournamentOptions = {
    type: 'singles'
  };

  $scope.setStringArrValue = function (key, value) {
    return $scope.tournamentOptions[key] = stringToArray($scope.tournamentOptions[value]);
  };

  if ($scope.bucket.length === 0) return $state.go('userManage'); // don't refresh the page here, I guess

  $scope.getOptions = function () {
    var type = $scope.tournamentOptions.type;
    if (type === 'singles' || type === 'doubles') return { type: type, last: type === 'singles' ? Duel.WB : Duel.LB, short: $scope.tournamentOptions.short };
    return $scope.tournamentOptions;
  };

  $scope.isInvalid = function () {
    var type = $scope.tournamentOptions.type;
    if (type === 'singles' || type === 'doubles') return Duel.invalid($scope.bucket.length, $scope.getOptions());
    if (type === 'groupstage') return GroupStage.invalid($scope.bucket.length, $scope.getOptions());
    if (type === 'ffa') return FFA.invalid($scope.bucket.length, $scope.getOptions());
    if (type === 'masters') return Masters.invalid($scope.bucket.length, $scope.getOptions());
    return true;
  };

  $scope.sort = {
    descending: function descending() {
      return $scope.bucket = _.sortByOrder($scope.bucket, ['points', 'wins'], ['desc', 'desc']);
    },
    shuffle: function shuffle() {
      return $scope.bucket = _.shuffle($scope.bucket);
    },
    stagger: function stagger() {
      $scope.sort.descending();

      var newOrder = [];
      for (var i = $scope.bucket.length - 1; i >= 0; i--) {
        var item = $scope.bucket[i];
        var func = i % 2 === 0 ? 'unshift' : 'push';
        newOrder[func](item);
      }
      $scope.bucket = newOrder;
    }
  };

  $scope.removeFromBucket = CurrentPlayerBucket.remove;

  $scope.baseGroupSize = function () {
    return ~ ~Math.sqrt($scope.bucket.length);
  };

  $scope.start = function () {
    var ref = $firebaseObject(new Firebase(FirebaseURL + '/users/' + UserStatus.firebase.playerSetUid + '/players/' + UserStatus.firebase.playerSet + '/tournaments/' + $stateParams.tournamentId));

    ref.$loaded().then(function () {
      ref.options = $scope.getOptions();
      ref.players = _.map($scope.bucket, function (player) {
        return {
          id: player.$id,
          name: player.name,
          alias: player.chosenAlias || ''
        };
      });
      ref.status = TournamentStatus.IN_PROGRESS;
      ref.$save().then(function () {
        CurrentPlayerBucket.clear();
        $state.go('tournamentInProgress', { userId: ShareToken(authData.uid), tournamentId: $stateParams.tournamentId, setId: UserStatus.firebase.playerSet });
      });
    });
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/controllers/userSettingsCtrl.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].controller('userSettingsController', function ($scope, SidebarManagement, EnsureLoggedIn, ShareToken, FirebaseURL, $firebaseObject, Toaster) {

  SidebarManagement.hasSidebar = true;
  var authData = EnsureLoggedIn.check();

  $scope.shareId = ShareToken(authData.uid);

  var data = $firebaseObject(new Firebase(FirebaseURL + '/users/' + authData.uid));

  var clipboard = new Clipboard('#copy-id');
  clipboard.on('success', function () {
    Toaster.show('Copied ID to clipboard!');
  });

  $scope.save = function () {
    var importantData = {
      events: data.events,
      players: data.players,
      tournaments: data.tournaments
    };
    var blob = new Blob([JSON.stringify(importantData)], { type: 'text/plain;charset=utf-8' });
    saveAs(blob, 'info-' + Date.now() + '.openchallenge');
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/directives/draw-to.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

var getId = function getId(str) {
  var chars = ['[', ']', '{', '}', '"', ':', ','];
  _.each(chars, function (char) {
    return str = str.split(char).join('-');
  });
  return str;
};

_app2['default'].directive('drawTo', function ($timeout) {
  return function (scope, element, attrs) {
    if (!attrs.drawTo) return;
    var drawTo = JSON.parse(attrs.drawTo);
    if (!drawTo || $('#line-' + getId(JSON.stringify(drawTo))).length > 0) return;

    var drawLine = function drawLine(x1, y1, x2, y2) {
      var thickness = arguments.length <= 4 || arguments[4] === undefined ? 1 : arguments[4];
      var color = arguments.length <= 5 || arguments[5] === undefined ? '#888' : arguments[5];

      var length = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      var cx = (x1 + x2) / 2 - length / 2;
      var cy = (y1 + y2) / 2 - thickness / 2;
      var angle = Math.atan2(y1 - y2, x1 - x2) * (180 / Math.PI);
      var htmlLine = '<div id=\'line-' + getId(JSON.stringify(drawTo)) + '\' style=\'padding:0; margin:0; height: ' + thickness + 'px; background-color:' + color + '; line-height:1px; position:absolute; left: ' + cx + 'px; top: ' + cy + 'px; width: ' + length + 'px; transform:rotate(' + angle + 'deg);\' />';

      $('.duel-area').append($(htmlLine));
    };

    $timeout(function () {
      var $me = $(element).children('.match-data');
      var $baseTarget = $('[data-match-id=\'' + JSON.stringify(drawTo[0]) + '\']');
      var $target = $baseTarget.find('.member-' + drawTo[1]);
      var $targetRound = $baseTarget.find('.round-type');
      if (!$target.length || !$me.length) return;

      // console.log($me, $baseTarget, $target);

      var meBounds = $me[0].getBoundingClientRect();
      var targetBounds = $target[0].getBoundingClientRect();

      var headerBarOffset = $('.header-bar').height();

      // element + an offset
      var x1 = meBounds.left + meBounds.width + 10;
      var y1 = meBounds.top - meBounds.height / 2 - headerBarOffset;

      // element - an offset
      var x2 = targetBounds.left - $targetRound.width() - 20;
      var y2 = targetBounds.top - targetBounds.height - 20 - headerBarOffset;

      var myRound = JSON.parse(attrs.matchId).r;
      var targetRound = drawTo[0].r;

      // if it's too far away, /2 is not a good midpoint
      var modifier = targetRound - myRound === 1 ? 2 : 1.05;

      var mid = x1 + (x2 - x1) / modifier;

      drawLine(x1, y1, mid, y1);
      drawLine(mid, y1, mid, y2);
      drawLine(mid, y2, x2, y2);
    }, 0);
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/directives/hover-highlight.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].directive('hoverHighlight', function () {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {

      $(element).hover(function () {
        if (!attrs.hoverName) return;
        var ref = $('body > md-toolbar');
        $('[hover-name=\'' + attrs.hoverName + '\']').css('background-color', ref.css('background-color')).css('color', ref.css('color'));
      }, function () {
        $('[hover-name=\'' + attrs.hoverName + '\']').css('background-color', '').css('color', '');
      });
    }
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/directives/score.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].directive('score', function ($timeout) {
  return {
    restrict: 'E',
    templateUrl: 'score',
    scope: {
      value: '='
    },
    link: function link(scope, element, attrs) {
      scope.editing = false;
      scope.editStuff = { value: scope.value }; // don't bind to primitives, they said

      scope.edit = function () {
        if (!attrs.canClick) return;
        scope.editing = true;
        $timeout(function () {
          $(element).find('.score-input').focus();
          $(element).find('.score-input').select();
        }, 0);
      };
      scope.unedit = function () {
        return scope.editing = false;
      };

      scope.watchKeyPresses = function (e) {
        if (e.which !== 13) return;
        scope.unedit();
      };

      scope.$watch('editStuff.value', function (newVal) {
        return scope.value = newVal;
      });
    }
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/directives/scroll-observe.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

// bind scroll so the stupid things move horizontally
// fix the stupid vertical crap b/c its bad
_app2['default'].directive('scrollObserve', function () {
  return function (scope, element, attrs) {
    var window = $('.scroller');
    var setSize = function setSize() {
      $(element).css('left', -window.scrollLeft() + 330 * +attrs.scrollObserve + 'px');
    };
    setSize();
    window.on('scroll', setSize);
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/routes.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('./app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].config(function ($stateProvider, $urlRouterProvider) {

  $urlRouterProvider.otherwise('/');

  $stateProvider.state('home', {
    url: '/',
    views: {
      'content@': { templateUrl: '/home', controller: 'homeController' }
    }
  }).state('userManage', {
    url: '/players',
    views: {
      'content@': { templateUrl: '/user-manage', controller: 'userManageController' },
      'sidebar@': { templateUrl: '/tournament-sidebar', controller: 'tournamentSidebarController' }
    }
  }).state('eventManage', {
    url: '/events',
    views: {
      'content@': { templateUrl: '/event-manage', controller: 'eventManageController' },
      'sidebar@': { templateUrl: '/tournament-sidebar', controller: 'tournamentSidebarController' }
    }
  }).state('tournamentManage', {
    url: '/tournaments',
    views: {
      'content@': { templateUrl: '/tournament-manage', controller: 'tournamentManageController' },
      'sidebar@': { templateUrl: '/tournament-sidebar', controller: 'tournamentSidebarController' }
    }
  }).state('userSettings', {
    url: '/settings',
    views: {
      'content@': { templateUrl: '/user-settings', controller: 'userSettingsController' },
      'sidebar@': { templateUrl: '/tournament-sidebar', controller: 'tournamentSidebarController' }
    }
  }).state('setupTournament', {
    url: '/tournaments/setup/:tournamentId',
    views: {
      'content@': { templateUrl: '/tournaments/not-started', controller: 'notStartedController' },
      'sidebar@': { templateUrl: '/tournament-sidebar', controller: 'tournamentSidebarController' }
    }
  }).state('tournamentInProgress', {
    url: '/tournaments/:userId/:setId/:tournamentId',
    views: {
      'content@': { templateUrl: '/tournaments/in-progress', controller: 'inProgressController' }
    }
  });
});

},{"./app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/auth.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('Auth', function (FirebaseURL, UserStatus, $window, $q, $state, $firebaseAuth, $firebaseObject) {

  var loaded = $q.defer();

  var loginTypes = [{
    name: 'Facebook',
    icon: 'facebook'
  }, {
    name: 'Twitter',
    icon: 'twitter'
  }, {
    name: 'Google',
    icon: 'google-plus'
  }];

  var authBase = $firebaseAuth(new Firebase(FirebaseURL));

  var handleAuth = function handleAuth(authData) {
    var provider = authData.auth.provider;
    UserStatus.displayName = authData[provider].displayName;
    UserStatus.loggedIn = true;
    UserStatus.authData = authData;

    UserStatus.firebase = $firebaseObject(new Firebase(FirebaseURL + '/users/' + authData.uid));

    UserStatus.firebase.$loaded(function () {
      if (!UserStatus.firebase.provider) {
        UserStatus.firebase.provider = authData.auth.provider;
        UserStatus.firebase.$save();
      }

      if (!UserStatus.firebase.name) {
        UserStatus.firebase.name = authData[authData.auth.provider].displayName;
        UserStatus.firebase.$save();
      }
      loaded.resolve();
    });
  };

  var attemptAuth = authBase.$getAuth();
  if (attemptAuth) handleAuth(attemptAuth);

  var doLogin = function doLogin(service) {
    authBase.$authWithOAuthPopup(service.toLowerCase()).then(function (authData) {
      handleAuth(authData);
      $state.go('userManage');
    })['catch'](function (error) {
      console.error('Authentication failed', error);
    });
  };

  var doLogout = function doLogout() {
    authBase.$unauth();
    UserStatus.loggedIn = false;
    $state.go('home');
    $window.location.reload();
  };

  return {
    loginTypes: loginTypes,
    doLogin: doLogin,
    doLogout: doLogout,
    ready: loaded.promise
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentEvents.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('CurrentEvents', function ($q, $firebaseArray, FirebaseURL, UserStatus) {
  var defer = $q.defer();

  var ref = $firebaseArray(new Firebase(FirebaseURL + '/users/' + UserStatus.firebase.playerSetUid + '/players/' + UserStatus.firebase.playerSet + '/events'));

  UserStatus.firebase.$watch(function () {
    ref = $firebaseArray(new Firebase(FirebaseURL + '/users/' + UserStatus.firebase.playerSetUid + '/players/' + UserStatus.firebase.playerSet + '/events'));
    defer.notify(ref);
  });

  return {
    get: function get() {
      return ref;
    },
    watch: defer.promise
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentPlayerBucket.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('CurrentPlayerBucket', function ($q, $localStorage) {

  var bucket = $localStorage.bucket || [];
  var defer = $q.defer();

  return {
    add: function add() {
      var _bucket;

      var newMembers = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

      (_bucket = bucket).push.apply(_bucket, _toConsumableArray(newMembers));
      bucket = _.uniq(bucket, '$id');
      $localStorage.bucket = bucket;
      defer.notify(bucket);
    },
    remove: function remove(person) {
      bucket = _.without(bucket, person);
      $localStorage.bucket = bucket;
      defer.notify(bucket);
    },
    get: function get() {
      return bucket;
    },
    clear: function clear() {
      bucket.length = 0;
      $localStorage.bucket = bucket;
      defer.notify(bucket);
    },
    watch: defer.promise
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentTournament.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('CurrentTournament', function () {
  return {};
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentTournaments.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('CurrentTournaments', function ($q, $firebaseArray, FirebaseURL, UserStatus) {
  var defer = $q.defer();

  var ref = $firebaseArray(new Firebase(FirebaseURL + '/users/' + UserStatus.firebase.playerSetUid + '/players/' + UserStatus.firebase.playerSet + '/tournaments'));

  UserStatus.firebase.$watch(function () {
    ref = $firebaseArray(new Firebase(FirebaseURL + '/users/' + UserStatus.firebase.playerSetUid + '/players/' + UserStatus.firebase.playerSet + '/tournaments'));
    defer.notify(ref);
  });

  return {
    get: function get() {
      return ref;
    },
    watch: defer.promise
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/currents/currentUsers.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('CurrentUsers', function ($q, $firebaseObject, FirebaseURL, Auth, UserStatus) {

  var users = UserStatus.firebase ? $firebaseObject(new Firebase(FirebaseURL + '/users/' + UserStatus.firebase.playerSetUid + '/players/' + UserStatus.firebase.playerSet)) : {};
  var defer = $q.defer();

  var newUsers = function newUsers() {
    users = $firebaseObject(new Firebase(FirebaseURL + '/users/' + UserStatus.firebase.playerSetUid + '/players/' + UserStatus.firebase.playerSet));
    users.$loaded(function () {
      defer.notify(users);
    });
  };

  Auth.ready.then(function () {
    newUsers();
    UserStatus.firebase.$watch(newUsers);
  });

  return {
    get: function get() {
      return users;
    },
    watch: defer.promise
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/disconnectNotifier.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('DisconnectNotifier', function ($q, FirebaseURL) {
  var firebase = new Firebase(FirebaseURL + '/.info/connected');
  var defer = $q.defer();

  firebase.on('value', function (snap) {
    defer.notify(snap.val());
  });

  return defer.promise;
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/ensureLoggedIn.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('EnsureLoggedIn', function (UserStatus, $state) {
  return {
    check: function check() {
      var autologout = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      if (UserStatus.loggedIn) return UserStatus.authData;
      if (autologout) $state.go('home');
    }
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/filterUtils.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('FilterUtils', function () {

  var filterByContains = function filterByContains(array, contains) {
    return _.filter(array, function (str) {
      return _.contains(str.toLowerCase(), contains.toLowerCase());
    });
  };
  var getUniqueKeys = function getUniqueKeys(array, key) {
    return _.compact(_.uniq(_.flatten([_.pluck(array, key)], true)));
  };
  var getAndFilter = function getAndFilter(array, key) {
    var search = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];
    return filterByContains(getUniqueKeys(array, key), search);
  };

  // get a filter array for user if they exist
  var getFilterArr = function getFilterArr(user, arr) {
    return user[arr] ? _.map(user[arr], function (s) {
      return s.toLowerCase();
    }) : [];
  };

  // check if anything in the right is a substring in the left
  var containsAny = function containsAny(left, right) {
    return _.some(right, function (filterKey) {
      return _.some(left, function (string) {
        return _.contains(string, filterKey);
      });
    });
  };

  var filterTable = function filterTable(array, datatable) {
    var criterion = arguments.length <= 2 || arguments[2] === undefined ? function () {
      return [];
    } : arguments[2];

    // allow multiple filters separated by a comma
    var filterArr = _.compact(_.map(datatable.filter.toLowerCase().split(','), function (m) {
      return m.trim();
    }));

    // pagination and stuff
    var startIndex = datatable.limit * (datatable.page - 1);
    var endIndex = startIndex + datatable.limit;
    var doReverse = datatable.order.charAt(0) === '-';
    var order = datatable.order;

    if (doReverse) {
      order = order.substring(1);
    }

    var filtered = _(array).filter(function (user) {

      // only show people that match all criteria
      return filterArr.length === 0 ? true : _.reduce(_.map(criterion(user), function (criteria) {
        return containsAny(criteria, filterArr);
      }), function (prev, cur) {
        return prev + ~ ~cur;
      }, 0) >= filterArr.length;
    }).sortByOrder([order], [doReverse ? 'asc' : 'desc']).slice(startIndex, endIndex).value();

    return filtered;
  };

  return {
    containsAny: containsAny,
    getFilterArr: getFilterArr,
    getUniqueKeys: getUniqueKeys,
    getAndFilter: getAndFilter,
    filterByContains: filterByContains,
    filterTable: filterTable
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/eventManagement.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('EventManagement', function (FirebaseURL, $mdDialog, Toaster, $filter, FilterUtils) {

  var defaultMdDialogOptions = {
    clickOutsideToClose: true,
    controller: 'eventDialogController',
    focusOnOpen: false,
    templateUrl: '/dialog/addevent'
  };

  var addItem = function addItem(browserEvent, callback) {
    var mdDialogOptions = _.clone(defaultMdDialogOptions);
    mdDialogOptions.event = browserEvent;
    mdDialogOptions.locals = { tEvent: {} };
    $mdDialog.show(mdDialogOptions).then(callback);
  };

  var editItem = function editItem(browserEvent, tEvent, callback) {
    var mdDialogOptions = _.clone(defaultMdDialogOptions);
    mdDialogOptions.event = browserEvent;
    mdDialogOptions.locals = { tEvent: tEvent };
    $mdDialog.show(mdDialogOptions).then(callback);
  };

  var removeItem = function removeItem(browserEvent, tEvents, callback) {
    var dialog = $mdDialog.confirm().targetEvent(browserEvent).title('Remove Event').content('Are you sure you want to remove ' + tEvents.length + ' events?').ok('OK').cancel('Cancel');

    $mdDialog.show(dialog).then(function () {
      Toaster.show('Successfully removed ' + tEvents.length + ' events.');
      callback();
    });
  };

  var archiveItem = function archiveItem(browserEvent, tEvents, callback) {
    var string = _.any(tEvents, 'archived') ? 'unarchived' : 'archived';
    Toaster.show('Successfully ' + string + ' ' + tEvents.length + ' events.');
    callback();
  };

  var filterEvents = function filterEvents(events, datatable) {
    var archived = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    var func = archived ? 'filter' : 'reject';
    return _[func](FilterUtils.filterTable(events, datatable, function (event) {
      return [[event.name.toLowerCase()], [(event.description || '').toLowerCase()], [event.location.toLowerCase()], [$filter('date')(event.date, 'fullDate').toLowerCase()]];
    }), 'archived');
  };

  return {
    addItem: addItem,
    editItem: editItem,
    removeItem: removeItem,
    archiveItem: archiveItem,
    filterEvents: filterEvents
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/setManagement.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('SetManagement', function (FirebaseURL, $mdDialog, InputPrompt, SelectPrompt, SharePrompt, Toaster) {

  var newSet = function newSet(event, invalidValues, callback) {
    InputPrompt.show(event, {
      title: 'Add new player set',
      label: 'Player set name',
      invalidValues: invalidValues
    }, function (string) {
      Toaster.show('Successfully added new player set "' + string + '"');
      callback(string);
    });
  };

  var renameSet = function renameSet(event, defaultName, callback) {
    InputPrompt.show(event, {
      defaultValue: defaultName,
      title: 'Rename this player set',
      label: 'Player set name'
    }, function (string) {
      Toaster.show('Successfully renamed player set to "' + string + '"');
      callback(string);
    });
  };

  var changeSet = function changeSet(event, current, choices, callback) {
    SelectPrompt.show(event, {
      defaultValue: current,
      selectableValues: choices,
      title: 'Choose a player set',
      label: 'Player set'
    }, function (string) {
      Toaster.show('Successfully changed player set to "' + string + '"');
      callback(string);
    });
  };

  var deleteSet = function deleteSet(event, callback) {
    var dialog = $mdDialog.confirm().targetEvent(event).title('Remove Player').content('Are you sure you want to remove this player set?').ok('OK').cancel('Cancel');

    $mdDialog.show(dialog).then(function () {
      Toaster.show('Successfully removed player set.');
      callback();
    });
  };

  var shareSet = function shareSet(event, docName, defaultShared, callback) {
    SharePrompt.show(event, {
      title: docName,
      defaultValue: defaultShared || []
    }, function (data) {
      Toaster.show('Successfully updated share settings');
      callback(data);
    });
  };

  return {
    newSet: newSet,
    renameSet: renameSet,
    deleteSet: deleteSet,
    shareSet: shareSet,
    changeSet: changeSet
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/shareManagement.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('ShareManagement', function (UserStatus, FirebaseURL, $firebaseArray) {

  var me = UserStatus.authData.uid;

  var manageSorting = function manageSorting(oldSortsPlucked, newSorts, docId) {
    var newSortsPlucked = _.pluck(newSorts, 'uid');
    var removals = _.difference(oldSortsPlucked, newSortsPlucked);
    var additions = _.difference(newSortsPlucked, oldSortsPlucked);

    if (removals.length === 0 && additions.length === 0) return;

    _.each(additions, function (add) {
      var sharebase = $firebaseArray(new Firebase(FirebaseURL + '/shares/' + add + '/' + me));
      sharebase.$loaded().then(function () {
        sharebase.$add(docId);
      });
    });

    _.each(removals, function (rem) {
      var sharebase = $firebaseArray(new Firebase(FirebaseURL + '/shares/' + rem + '/' + me));
      sharebase.$loaded().then(function () {
        var item = _.findWhere(sharebase, { $value: docId });
        sharebase.$remove(sharebase.$indexFor(item.$id));
      });
    });
  };

  return {
    manageSorting: manageSorting
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/sidebarManagement.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('SidebarManagement', function () {
  return {
    hasSidebar: false
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/tournamentManagement.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('TournamentManagement', function (FirebaseURL, $mdDialog, Toaster, $filter, FilterUtils, CurrentEvents) {

  var defaultMdDialogOptions = {
    clickOutsideToClose: true,
    controller: 'tournamentDialogController',
    focusOnOpen: false,
    templateUrl: '/dialog/addtournament'
  };

  var addItem = function addItem(browserEvent, callback) {
    var mdDialogOptions = _.clone(defaultMdDialogOptions);
    mdDialogOptions.event = browserEvent;
    mdDialogOptions.locals = { tournament: {} };
    $mdDialog.show(mdDialogOptions).then(callback);
  };

  var editItem = function editItem(browserEvent, tournament, callback) {
    var mdDialogOptions = _.clone(defaultMdDialogOptions);
    mdDialogOptions.event = browserEvent;
    mdDialogOptions.locals = { tournament: tournament };
    $mdDialog.show(mdDialogOptions).then(callback);
  };

  var removeItem = function removeItem(browserEvent, tEvents, callback) {
    var dialog = $mdDialog.confirm().targetEvent(browserEvent).title('Remove Event').content('Are you sure you want to remove ' + tEvents.length + ' tournaments?').ok('OK').cancel('Cancel');

    $mdDialog.show(dialog).then(function () {
      Toaster.show('Successfully removed ' + tEvents.length + ' tournaments.');
      callback();
    });
  };

  var archiveItem = function archiveItem(browserEvent, tEvents, callback) {
    var string = _.any(tEvents, 'archived') ? 'unarchived' : 'archived';
    Toaster.show('Successfully ' + string + ' ' + tEvents.length + ' tournaments.');
    callback();
  };

  var getTournamentEventNameFromId = function getTournamentEventNameFromId(id) {
    if (!id) return '';
    var event = _.findWhere(CurrentEvents.get(), { $id: id });
    if (!event) return '';
    return event.name;
  };

  var filterTournaments = function filterTournaments(events, datatable) {
    var archived = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    var func = archived ? 'filter' : 'reject';
    return _[func](FilterUtils.filterTable(events, datatable, function (tournament) {
      return [[tournament.name.toLowerCase()], [tournament.game.toLowerCase()], [tournament.status.toLowerCase()], [getTournamentEventNameFromId(tournament.event).toLowerCase()]];
    }), 'archived');
  };

  return {
    addItem: addItem,
    editItem: editItem,
    removeItem: removeItem,
    archiveItem: archiveItem,
    filterTournaments: filterTournaments,
    getTournamentEventNameFromId: getTournamentEventNameFromId
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/managers/userManagement.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('UserManagement', function (FirebaseURL, $mdDialog, Toaster, FilterUtils) {

  var defaultMdDialogOptions = {
    clickOutsideToClose: true,
    controller: 'userDialogController',
    focusOnOpen: false,
    templateUrl: '/dialog/adduser'
  };

  var addItem = function addItem(event, callback) {
    var mdDialogOptions = _.clone(defaultMdDialogOptions);
    mdDialogOptions.event = event;
    mdDialogOptions.locals = { player: {}, viewOnly: false };
    $mdDialog.show(mdDialogOptions).then(callback);
  };

  var editItem = function editItem(event, player, callback) {
    var mdDialogOptions = _.clone(defaultMdDialogOptions);
    mdDialogOptions.event = event;
    mdDialogOptions.locals = { player: player, viewOnly: false };
    $mdDialog.show(mdDialogOptions).then(callback);
  };

  var removeItem = function removeItem(event, players, callback) {
    var dialog = $mdDialog.confirm().targetEvent(event).title('Remove Player').content('Are you sure you want to remove ' + players.length + ' players?').ok('OK').cancel('Cancel');

    $mdDialog.show(dialog).then(function () {
      Toaster.show('Successfully removed ' + players.length + ' players.');
      callback();
    });
  };

  var viewItem = function viewItem(event, player) {
    event.stopPropagation();
    var mdDialogOptions = _.clone(defaultMdDialogOptions);
    mdDialogOptions.event = event;
    mdDialogOptions.locals = { player: player, viewOnly: true };
    $mdDialog.show(mdDialogOptions);
  };

  var filterUsers = function filterUsers(users, datatable) {
    return FilterUtils.filterTable(users, datatable, function (user) {
      return [[user.name.toLowerCase()], [user.location.toLowerCase()], FilterUtils.getFilterArr(user, 'aliases'), FilterUtils.getFilterArr(user, 'games'), FilterUtils.getFilterArr(user, 'characters')];
    });
  };

  return {
    addItem: addItem,
    editItem: editItem,
    removeItem: removeItem,
    viewItem: viewItem,
    filterUsers: filterUsers
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/prompts/inputPrompt.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('InputPrompt', function ($mdDialog) {
  return {
    show: function show(event, opts, callback) {
      if (opts === undefined) opts = {};

      var locals = _.extend({ name: 'Enter data', defaultValue: '', label: 'Data', invalidValues: [] }, opts);

      var mdDialogOptions = {
        event: event, locals: locals,
        clickOutsideToClose: true,
        controller: 'inputPromptController',
        focusOnOpen: false,
        templateUrl: '/dialog/input-prompt'
      };

      $mdDialog.show(mdDialogOptions).then(callback);
    }
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/prompts/selectPrompt.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('SelectPrompt', function ($mdDialog) {
  return {
    show: function show(event, opts, callback) {
      if (opts === undefined) opts = {};

      var locals = _.extend({ name: 'Enter data', defaultValue: '', label: 'Data', selectableValues: [] }, opts);

      var mdDialogOptions = {
        event: event, locals: locals,
        clickOutsideToClose: true,
        controller: 'selectPromptController',
        focusOnOpen: false,
        templateUrl: '/dialog/select-prompt'
      };

      $mdDialog.show(mdDialogOptions).then(callback);
    }
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/prompts/sharePrompt.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('SharePrompt', function ($mdDialog) {
  return {
    show: function show(event, opts, callback) {
      if (opts === undefined) opts = {};

      var locals = _.extend({ defaultValue: [], title: '' }, opts);

      var mdDialogOptions = {
        event: event, locals: locals,
        clickOutsideToClose: true,
        controller: 'sharePromptController',
        focusOnOpen: false,
        templateUrl: '/dialog/share-prompt'
      };

      $mdDialog.show(mdDialogOptions).then(callback);
    }
  };
});

},{"../../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/scoring.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('ScoringFunctions', function (CurrentTournaments, TournamentStatus) {

  return {

    // Wins - Losses
    simple: function simple(players) {
      _.each(players, function (player) {
        player.points = player.wins - player.losses;
      });
    },

    // (400 * (wins - losses) + x) / y
    // x = total score of all opponents in every match ever
    // y = total number of opponents in every match ever
    ell: function ell(players) {
      var tempScores = {};
      _.each(players, function (player) {
        tempScores[player.$id] = 400 * (player.wins - player.losses);
      });

      _.each(_.filter(CurrentTournaments.get(), function (t) {
        return t.status === TournamentStatus.COMPLETED;
      }), function (tournament) {
        _.each(tournament.matches, function (match) {
          if (_.any(match.p, function (p) {
            return p === -1;
          })) return; // ignore walkover matches
          _.each(match.p, function (p) {
            var currentPlayer = tournament.players[p - 1];
            var otherPlayersScore = _(match.p).without(p).map(function (p) {
              return tempScores[tournament.players[p - 1].id];
            }).value();

            var fbPlayerObj = players.$getRecord(currentPlayer.id);
            fbPlayerObj.points += _.reduce(otherPlayersScore, function (prev, x) {
              return prev + x;
            }, 0) / otherPlayersScore.length;
          });
        });
      });
    }
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/shareToken.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('ShareToken', function () {
  return function (userId) {
    try {
      return btoa(userId);
    } catch (e) {
      return '';
    }
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/toaster.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('Toaster', function ($mdToast) {
  return {
    show: function show(string) {
      $mdToast.show($mdToast.simple().content(string).action('OK').position('top right'));
    }
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}],"/Users/seiyria/GitHub/openchallenge/src/js/services/userStatus.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _app = require('../app');

var _app2 = _interopRequireDefault(_app);

_app2['default'].service('UserStatus', function () {
  return {
    loggedIn: false,
    displayName: ''
  };
});

},{"../app":"/Users/seiyria/GitHub/openchallenge/src/js/app.js"}]},{},["/Users/seiyria/GitHub/openchallenge/src/js/_init.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
